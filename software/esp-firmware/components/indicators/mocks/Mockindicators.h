/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKINDICATORS_H
#define _MOCKINDICATORS_H

#include "unity.h"
#include "indicators.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockindicators_Init(void);
void Mockindicators_Destroy(void);
void Mockindicators_Verify(void);




#define indicateWifiConnected_Ignore() TEST_FAIL_MESSAGE("indicateWifiConnected requires _IgnoreAndReturn");
#define indicateWifiConnected_IgnoreAndReturn(cmock_retval) indicateWifiConnected_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void indicateWifiConnected_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateWifiConnected_StopIgnore() indicateWifiConnected_CMockStopIgnore()
void indicateWifiConnected_CMockStopIgnore(void);
#define indicateWifiConnected_Expect() TEST_FAIL_MESSAGE("indicateWifiConnected requires _ExpectAndReturn");
#define indicateWifiConnected_ExpectAndReturn(cmock_retval) indicateWifiConnected_CMockExpectAndReturn(__LINE__, cmock_retval)
void indicateWifiConnected_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateWifiNotConnected_Ignore() TEST_FAIL_MESSAGE("indicateWifiNotConnected requires _IgnoreAndReturn");
#define indicateWifiNotConnected_IgnoreAndReturn(cmock_retval) indicateWifiNotConnected_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void indicateWifiNotConnected_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateWifiNotConnected_StopIgnore() indicateWifiNotConnected_CMockStopIgnore()
void indicateWifiNotConnected_CMockStopIgnore(void);
#define indicateWifiNotConnected_Expect() TEST_FAIL_MESSAGE("indicateWifiNotConnected requires _ExpectAndReturn");
#define indicateWifiNotConnected_ExpectAndReturn(cmock_retval) indicateWifiNotConnected_CMockExpectAndReturn(__LINE__, cmock_retval)
void indicateWifiNotConnected_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateOTAAvailable_Ignore() TEST_FAIL_MESSAGE("indicateOTAAvailable requires _IgnoreAndReturn");
#define indicateOTAAvailable_IgnoreAndReturn(cmock_retval) indicateOTAAvailable_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void indicateOTAAvailable_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateOTAAvailable_StopIgnore() indicateOTAAvailable_CMockStopIgnore()
void indicateOTAAvailable_CMockStopIgnore(void);
#define indicateOTAAvailable_Expect() TEST_FAIL_MESSAGE("indicateOTAAvailable requires _ExpectAndReturn");
#define indicateOTAAvailable_ExpectAndReturn(cmock_retval) indicateOTAAvailable_CMockExpectAndReturn(__LINE__, cmock_retval)
void indicateOTAAvailable_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateOTAUpdate_Ignore() TEST_FAIL_MESSAGE("indicateOTAUpdate requires _IgnoreAndReturn");
#define indicateOTAUpdate_IgnoreAndReturn(cmock_retval) indicateOTAUpdate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void indicateOTAUpdate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateOTAUpdate_StopIgnore() indicateOTAUpdate_CMockStopIgnore()
void indicateOTAUpdate_CMockStopIgnore(void);
#define indicateOTAUpdate_Expect() TEST_FAIL_MESSAGE("indicateOTAUpdate requires _ExpectAndReturn");
#define indicateOTAUpdate_ExpectAndReturn(cmock_retval) indicateOTAUpdate_CMockExpectAndReturn(__LINE__, cmock_retval)
void indicateOTAUpdate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateOTAFailure_Ignore() TEST_FAIL_MESSAGE("indicateOTAFailure requires _IgnoreAndReturn");
#define indicateOTAFailure_IgnoreAndReturn(cmock_retval) indicateOTAFailure_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void indicateOTAFailure_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateOTAFailure_StopIgnore() indicateOTAFailure_CMockStopIgnore()
void indicateOTAFailure_CMockStopIgnore(void);
#define indicateOTAFailure_Expect(delay) TEST_FAIL_MESSAGE("indicateOTAFailure requires _ExpectAndReturn");
#define indicateOTAFailure_ExpectAndReturn(delay, cmock_retval) indicateOTAFailure_CMockExpectAndReturn(__LINE__, delay, cmock_retval)
void indicateOTAFailure_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t delay, esp_err_t cmock_to_return);
#define indicateOTASuccess_Ignore() TEST_FAIL_MESSAGE("indicateOTASuccess requires _IgnoreAndReturn");
#define indicateOTASuccess_IgnoreAndReturn(cmock_retval) indicateOTASuccess_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void indicateOTASuccess_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateOTASuccess_StopIgnore() indicateOTASuccess_CMockStopIgnore()
void indicateOTASuccess_CMockStopIgnore(void);
#define indicateOTASuccess_Expect(delay) TEST_FAIL_MESSAGE("indicateOTASuccess requires _ExpectAndReturn");
#define indicateOTASuccess_ExpectAndReturn(delay, cmock_retval) indicateOTASuccess_CMockExpectAndReturn(__LINE__, delay, cmock_retval)
void indicateOTASuccess_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int32_t delay, esp_err_t cmock_to_return);
#define indicateNorthbound_Ignore() TEST_FAIL_MESSAGE("indicateNorthbound requires _IgnoreAndReturn");
#define indicateNorthbound_IgnoreAndReturn(cmock_retval) indicateNorthbound_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void indicateNorthbound_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateNorthbound_StopIgnore() indicateNorthbound_CMockStopIgnore()
void indicateNorthbound_CMockStopIgnore(void);
#define indicateNorthbound_Expect() TEST_FAIL_MESSAGE("indicateNorthbound requires _ExpectAndReturn");
#define indicateNorthbound_ExpectAndReturn(cmock_retval) indicateNorthbound_CMockExpectAndReturn(__LINE__, cmock_retval)
void indicateNorthbound_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateSouthbound_Ignore() TEST_FAIL_MESSAGE("indicateSouthbound requires _IgnoreAndReturn");
#define indicateSouthbound_IgnoreAndReturn(cmock_retval) indicateSouthbound_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void indicateSouthbound_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateSouthbound_StopIgnore() indicateSouthbound_CMockStopIgnore()
void indicateSouthbound_CMockStopIgnore(void);
#define indicateSouthbound_Expect() TEST_FAIL_MESSAGE("indicateSouthbound requires _ExpectAndReturn");
#define indicateSouthbound_ExpectAndReturn(cmock_retval) indicateSouthbound_CMockExpectAndReturn(__LINE__, cmock_retval)
void indicateSouthbound_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateDirection_Ignore() TEST_FAIL_MESSAGE("indicateDirection requires _IgnoreAndReturn");
#define indicateDirection_IgnoreAndReturn(cmock_retval) indicateDirection_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void indicateDirection_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define indicateDirection_StopIgnore() indicateDirection_CMockStopIgnore()
void indicateDirection_CMockStopIgnore(void);
#define indicateDirection_Expect(dir) TEST_FAIL_MESSAGE("indicateDirection requires _ExpectAndReturn");
#define indicateDirection_ExpectAndReturn(dir, cmock_retval) indicateDirection_CMockExpectAndReturn(__LINE__, dir, cmock_retval)
void indicateDirection_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Direction dir, esp_err_t cmock_to_return);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
