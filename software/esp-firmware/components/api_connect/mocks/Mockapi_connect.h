/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKAPI_CONNECT_H
#define _MOCKAPI_CONNECT_H

#include "unity.h"
#include "api_connect.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockapi_connect_Init(void);
void Mockapi_connect_Destroy(void);
void Mockapi_connect_Verify(void);




#define openServerFile_Ignore() TEST_FAIL_MESSAGE("openServerFile requires _IgnoreAndReturn");
#define openServerFile_IgnoreAndReturn(cmock_retval) openServerFile_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void openServerFile_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define openServerFile_StopIgnore() openServerFile_CMockStopIgnore()
void openServerFile_CMockStopIgnore(void);
#define openServerFile_Expect(contentLength, client, URL, retryNum) TEST_FAIL_MESSAGE("openServerFile requires _ExpectAndReturn");
#define openServerFile_ExpectAndReturn(contentLength, client, URL, retryNum, cmock_retval) openServerFile_CMockExpectAndReturn(__LINE__, contentLength, client, URL, retryNum, cmock_retval)
void openServerFile_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int64_t* contentLength, esp_http_client_handle_t client, const char* URL, int retryNum, esp_err_t cmock_to_return);
#define getServerSpeeds_Ignore() TEST_FAIL_MESSAGE("getServerSpeeds requires _IgnoreAndReturn");
#define getServerSpeeds_IgnoreAndReturn(cmock_retval) getServerSpeeds_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void getServerSpeeds_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define getServerSpeeds_StopIgnore() getServerSpeeds_CMockStopIgnore()
void getServerSpeeds_CMockStopIgnore(void);
#define getServerSpeeds_Expect(ledSpeeds, ledSpeedsLen, client, URL, retryNum) TEST_FAIL_MESSAGE("getServerSpeeds requires _ExpectAndReturn");
#define getServerSpeeds_ExpectAndReturn(ledSpeeds, ledSpeedsLen, client, URL, retryNum, cmock_retval) getServerSpeeds_CMockExpectAndReturn(__LINE__, ledSpeeds, ledSpeedsLen, client, URL, retryNum, cmock_retval)
void getServerSpeeds_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LEDData* ledSpeeds, uint32_t ledSpeedsLen, esp_http_client_handle_t client, char* URL, int retryNum, esp_err_t cmock_to_return);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
