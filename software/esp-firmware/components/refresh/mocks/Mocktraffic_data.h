/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKTRAFFIC_DATA_H
#define _MOCKTRAFFIC_DATA_H

#include "unity.h"
#include "traffic_data.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mocktraffic_data_Init(void);
void Mocktraffic_data_Destroy(void);
void Mocktraffic_data_Verify(void);




#define initTrafficData_Ignore() TEST_FAIL_MESSAGE("initTrafficData requires _IgnoreAndReturn");
#define initTrafficData_IgnoreAndReturn(cmock_retval) initTrafficData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void initTrafficData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define initTrafficData_StopIgnore() initTrafficData_CMockStopIgnore()
void initTrafficData_CMockStopIgnore(void);
#define initTrafficData_Expect() TEST_FAIL_MESSAGE("initTrafficData requires _ExpectAndReturn");
#define initTrafficData_ExpectAndReturn(cmock_retval) initTrafficData_CMockExpectAndReturn(__LINE__, cmock_retval)
void initTrafficData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_initTrafficData_CALLBACK)(int cmock_num_calls);
void initTrafficData_AddCallback(CMOCK_initTrafficData_CALLBACK Callback);
void initTrafficData_Stub(CMOCK_initTrafficData_CALLBACK Callback);
#define initTrafficData_StubWithCallback initTrafficData_Stub
#define borrowTrafficData_Ignore() TEST_FAIL_MESSAGE("borrowTrafficData requires _IgnoreAndReturn");
#define borrowTrafficData_IgnoreAndReturn(cmock_retval) borrowTrafficData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void borrowTrafficData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define borrowTrafficData_StopIgnore() borrowTrafficData_CMockStopIgnore()
void borrowTrafficData_CMockStopIgnore(void);
#define borrowTrafficData_Expect(category, xTicksToWait) TEST_FAIL_MESSAGE("borrowTrafficData requires _ExpectAndReturn");
#define borrowTrafficData_ExpectAndReturn(category, xTicksToWait, cmock_retval) borrowTrafficData_CMockExpectAndReturn(__LINE__, category, xTicksToWait, cmock_retval)
void borrowTrafficData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SpeedCategory category, TickType_t xTicksToWait, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_borrowTrafficData_CALLBACK)(SpeedCategory category, TickType_t xTicksToWait, int cmock_num_calls);
void borrowTrafficData_AddCallback(CMOCK_borrowTrafficData_CALLBACK Callback);
void borrowTrafficData_Stub(CMOCK_borrowTrafficData_CALLBACK Callback);
#define borrowTrafficData_StubWithCallback borrowTrafficData_Stub
#define borrowTrafficData_IgnoreArg_category() borrowTrafficData_CMockIgnoreArg_category(__LINE__)
void borrowTrafficData_CMockIgnoreArg_category(UNITY_LINE_TYPE cmock_line);
#define borrowTrafficData_IgnoreArg_xTicksToWait() borrowTrafficData_CMockIgnoreArg_xTicksToWait(__LINE__)
void borrowTrafficData_CMockIgnoreArg_xTicksToWait(UNITY_LINE_TYPE cmock_line);
#define releaseTrafficData_Ignore() TEST_FAIL_MESSAGE("releaseTrafficData requires _IgnoreAndReturn");
#define releaseTrafficData_IgnoreAndReturn(cmock_retval) releaseTrafficData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void releaseTrafficData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define releaseTrafficData_StopIgnore() releaseTrafficData_CMockStopIgnore()
void releaseTrafficData_CMockStopIgnore(void);
#define releaseTrafficData_Expect(category) TEST_FAIL_MESSAGE("releaseTrafficData requires _ExpectAndReturn");
#define releaseTrafficData_ExpectAndReturn(category, cmock_retval) releaseTrafficData_CMockExpectAndReturn(__LINE__, category, cmock_retval)
void releaseTrafficData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SpeedCategory category, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_releaseTrafficData_CALLBACK)(SpeedCategory category, int cmock_num_calls);
void releaseTrafficData_AddCallback(CMOCK_releaseTrafficData_CALLBACK Callback);
void releaseTrafficData_Stub(CMOCK_releaseTrafficData_CALLBACK Callback);
#define releaseTrafficData_StubWithCallback releaseTrafficData_Stub
#define releaseTrafficData_IgnoreArg_category() releaseTrafficData_CMockIgnoreArg_category(__LINE__)
void releaseTrafficData_CMockIgnoreArg_category(UNITY_LINE_TYPE cmock_line);
#define updateTrafficData_Ignore() TEST_FAIL_MESSAGE("updateTrafficData requires _IgnoreAndReturn");
#define updateTrafficData_IgnoreAndReturn(cmock_retval) updateTrafficData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void updateTrafficData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define updateTrafficData_StopIgnore() updateTrafficData_CMockStopIgnore()
void updateTrafficData_CMockStopIgnore(void);
#define updateTrafficData_Expect(data, dataSize, dir, category) TEST_FAIL_MESSAGE("updateTrafficData requires _ExpectAndReturn");
#define updateTrafficData_ExpectAndReturn(data, dataSize, dir, category, cmock_retval) updateTrafficData_CMockExpectAndReturn(__LINE__, data, dataSize, dir, category, cmock_retval)
void updateTrafficData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LEDData* data, size_t dataSize, Direction dir, SpeedCategory category, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_updateTrafficData_CALLBACK)(LEDData* data, size_t dataSize, Direction dir, SpeedCategory category, int cmock_num_calls);
void updateTrafficData_AddCallback(CMOCK_updateTrafficData_CALLBACK Callback);
void updateTrafficData_Stub(CMOCK_updateTrafficData_CALLBACK Callback);
#define updateTrafficData_StubWithCallback updateTrafficData_Stub
#define updateTrafficData_ReturnThruPtr_data(data) updateTrafficData_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(LEDData))
#define updateTrafficData_ReturnArrayThruPtr_data(data, cmock_len) updateTrafficData_CMockReturnMemThruPtr_data(__LINE__, data, (cmock_len * sizeof(*data)))
#define updateTrafficData_ReturnMemThruPtr_data(data, cmock_size) updateTrafficData_CMockReturnMemThruPtr_data(__LINE__, data, (cmock_size))
void updateTrafficData_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, LEDData const* data, size_t cmock_size);
#define updateTrafficData_IgnoreArg_data() updateTrafficData_CMockIgnoreArg_data(__LINE__)
void updateTrafficData_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define updateTrafficData_IgnoreArg_dataSize() updateTrafficData_CMockIgnoreArg_dataSize(__LINE__)
void updateTrafficData_CMockIgnoreArg_dataSize(UNITY_LINE_TYPE cmock_line);
#define updateTrafficData_IgnoreArg_dir() updateTrafficData_CMockIgnoreArg_dir(__LINE__)
void updateTrafficData_CMockIgnoreArg_dir(UNITY_LINE_TYPE cmock_line);
#define updateTrafficData_IgnoreArg_category() updateTrafficData_CMockIgnoreArg_category(__LINE__)
void updateTrafficData_CMockIgnoreArg_category(UNITY_LINE_TYPE cmock_line);
#define copyTrafficData_Ignore() TEST_FAIL_MESSAGE("copyTrafficData requires _IgnoreAndReturn");
#define copyTrafficData_IgnoreAndReturn(cmock_retval) copyTrafficData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void copyTrafficData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define copyTrafficData_StopIgnore() copyTrafficData_CMockStopIgnore()
void copyTrafficData_CMockStopIgnore(void);
#define copyTrafficData_Expect(out, outLen, dir, category) TEST_FAIL_MESSAGE("copyTrafficData requires _ExpectAndReturn");
#define copyTrafficData_ExpectAndReturn(out, outLen, dir, category, cmock_retval) copyTrafficData_CMockExpectAndReturn(__LINE__, out, outLen, dir, category, cmock_retval)
void copyTrafficData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LEDData* out, size_t outLen, Direction dir, SpeedCategory category, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_copyTrafficData_CALLBACK)(LEDData* out, size_t outLen, Direction dir, SpeedCategory category, int cmock_num_calls);
void copyTrafficData_AddCallback(CMOCK_copyTrafficData_CALLBACK Callback);
void copyTrafficData_Stub(CMOCK_copyTrafficData_CALLBACK Callback);
#define copyTrafficData_StubWithCallback copyTrafficData_Stub
#define copyTrafficData_ReturnThruPtr_out(out) copyTrafficData_CMockReturnMemThruPtr_out(__LINE__, out, sizeof(LEDData))
#define copyTrafficData_ReturnArrayThruPtr_out(out, cmock_len) copyTrafficData_CMockReturnMemThruPtr_out(__LINE__, out, (cmock_len * sizeof(*out)))
#define copyTrafficData_ReturnMemThruPtr_out(out, cmock_size) copyTrafficData_CMockReturnMemThruPtr_out(__LINE__, out, (cmock_size))
void copyTrafficData_CMockReturnMemThruPtr_out(UNITY_LINE_TYPE cmock_line, LEDData const* out, size_t cmock_size);
#define copyTrafficData_IgnoreArg_out() copyTrafficData_CMockIgnoreArg_out(__LINE__)
void copyTrafficData_CMockIgnoreArg_out(UNITY_LINE_TYPE cmock_line);
#define copyTrafficData_IgnoreArg_outLen() copyTrafficData_CMockIgnoreArg_outLen(__LINE__)
void copyTrafficData_CMockIgnoreArg_outLen(UNITY_LINE_TYPE cmock_line);
#define copyTrafficData_IgnoreArg_dir() copyTrafficData_CMockIgnoreArg_dir(__LINE__)
void copyTrafficData_CMockIgnoreArg_dir(UNITY_LINE_TYPE cmock_line);
#define copyTrafficData_IgnoreArg_category() copyTrafficData_CMockIgnoreArg_category(__LINE__)
void copyTrafficData_CMockIgnoreArg_category(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
