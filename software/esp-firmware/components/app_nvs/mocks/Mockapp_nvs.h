/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKAPP_NVS_H
#define _MOCKAPP_NVS_H

#include "unity.h"
#include "app_nvs.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockapp_nvs_Init(void);
void Mockapp_nvs_Destroy(void);
void Mockapp_nvs_Verify(void);




#define openMainNvs_Ignore() TEST_FAIL_MESSAGE("openMainNvs requires _IgnoreAndReturn");
#define openMainNvs_IgnoreAndReturn(cmock_retval) openMainNvs_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void openMainNvs_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t cmock_to_return);
#define openMainNvs_StopIgnore() openMainNvs_CMockStopIgnore()
void openMainNvs_CMockStopIgnore(void);
#define openMainNvs_Expect() TEST_FAIL_MESSAGE("openMainNvs requires _ExpectAndReturn");
#define openMainNvs_ExpectAndReturn(cmock_retval) openMainNvs_CMockExpectAndReturn(__LINE__, cmock_retval)
void openMainNvs_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t cmock_to_return);
#define openWorkerNvs_Ignore() TEST_FAIL_MESSAGE("openWorkerNvs requires _IgnoreAndReturn");
#define openWorkerNvs_IgnoreAndReturn(cmock_retval) openWorkerNvs_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void openWorkerNvs_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t cmock_to_return);
#define openWorkerNvs_StopIgnore() openWorkerNvs_CMockStopIgnore()
void openWorkerNvs_CMockStopIgnore(void);
#define openWorkerNvs_Expect() TEST_FAIL_MESSAGE("openWorkerNvs requires _ExpectAndReturn");
#define openWorkerNvs_ExpectAndReturn(cmock_retval) openWorkerNvs_CMockExpectAndReturn(__LINE__, cmock_retval)
void openWorkerNvs_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t cmock_to_return);
#define nvsEntriesExist_Ignore() TEST_FAIL_MESSAGE("nvsEntriesExist requires _IgnoreAndReturn");
#define nvsEntriesExist_IgnoreAndReturn(cmock_retval) nvsEntriesExist_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvsEntriesExist_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvsEntriesExist_StopIgnore() nvsEntriesExist_CMockStopIgnore()
void nvsEntriesExist_CMockStopIgnore(void);
#define nvsEntriesExist_Expect(nvsHandle) TEST_FAIL_MESSAGE("nvsEntriesExist requires _ExpectAndReturn");
#define nvsEntriesExist_ExpectAndReturn(nvsHandle, cmock_retval) nvsEntriesExist_CMockExpectAndReturn(__LINE__, nvsHandle, cmock_retval)
void nvsEntriesExist_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t nvsHandle, esp_err_t cmock_to_return);
#define retrieveNvsEntries_Ignore() TEST_FAIL_MESSAGE("retrieveNvsEntries requires _IgnoreAndReturn");
#define retrieveNvsEntries_IgnoreAndReturn(cmock_retval) retrieveNvsEntries_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void retrieveNvsEntries_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define retrieveNvsEntries_StopIgnore() retrieveNvsEntries_CMockStopIgnore()
void retrieveNvsEntries_CMockStopIgnore(void);
#define retrieveNvsEntries_Expect(nvsHandle, settings) TEST_FAIL_MESSAGE("retrieveNvsEntries requires _ExpectAndReturn");
#define retrieveNvsEntries_ExpectAndReturn(nvsHandle, settings, cmock_retval) retrieveNvsEntries_CMockExpectAndReturn(__LINE__, nvsHandle, settings, cmock_retval)
void retrieveNvsEntries_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t nvsHandle, UserSettings* settings, esp_err_t cmock_to_return);
#define storeNvsSettings_Ignore() TEST_FAIL_MESSAGE("storeNvsSettings requires _IgnoreAndReturn");
#define storeNvsSettings_IgnoreAndReturn(cmock_retval) storeNvsSettings_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void storeNvsSettings_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define storeNvsSettings_StopIgnore() storeNvsSettings_CMockStopIgnore()
void storeNvsSettings_CMockStopIgnore(void);
#define storeNvsSettings_Expect(nvsHandle, settings) TEST_FAIL_MESSAGE("storeNvsSettings requires _ExpectAndReturn");
#define storeNvsSettings_ExpectAndReturn(nvsHandle, settings, cmock_retval) storeNvsSettings_CMockExpectAndReturn(__LINE__, nvsHandle, settings, cmock_retval)
void storeNvsSettings_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t nvsHandle, UserSettings settings, esp_err_t cmock_to_return);
#define removeExtraMainNvsEntries_Ignore() TEST_FAIL_MESSAGE("removeExtraMainNvsEntries requires _IgnoreAndReturn");
#define removeExtraMainNvsEntries_IgnoreAndReturn(cmock_retval) removeExtraMainNvsEntries_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void removeExtraMainNvsEntries_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define removeExtraMainNvsEntries_StopIgnore() removeExtraMainNvsEntries_CMockStopIgnore()
void removeExtraMainNvsEntries_CMockStopIgnore(void);
#define removeExtraMainNvsEntries_Expect(nvsHandle) TEST_FAIL_MESSAGE("removeExtraMainNvsEntries requires _ExpectAndReturn");
#define removeExtraMainNvsEntries_ExpectAndReturn(nvsHandle, cmock_retval) removeExtraMainNvsEntries_CMockExpectAndReturn(__LINE__, nvsHandle, cmock_retval)
void removeExtraMainNvsEntries_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t nvsHandle, esp_err_t cmock_to_return);
#define removeExtraWorkerNvsEntries_Ignore() TEST_FAIL_MESSAGE("removeExtraWorkerNvsEntries requires _IgnoreAndReturn");
#define removeExtraWorkerNvsEntries_IgnoreAndReturn(cmock_retval) removeExtraWorkerNvsEntries_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void removeExtraWorkerNvsEntries_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define removeExtraWorkerNvsEntries_StopIgnore() removeExtraWorkerNvsEntries_CMockStopIgnore()
void removeExtraWorkerNvsEntries_CMockStopIgnore(void);
#define removeExtraWorkerNvsEntries_Expect(nvsHandle) TEST_FAIL_MESSAGE("removeExtraWorkerNvsEntries requires _ExpectAndReturn");
#define removeExtraWorkerNvsEntries_ExpectAndReturn(nvsHandle, cmock_retval) removeExtraWorkerNvsEntries_CMockExpectAndReturn(__LINE__, nvsHandle, cmock_retval)
void removeExtraWorkerNvsEntries_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t nvsHandle, esp_err_t cmock_to_return);
#define getNvsEntriesFromUser_Ignore() TEST_FAIL_MESSAGE("getNvsEntriesFromUser requires _IgnoreAndReturn");
#define getNvsEntriesFromUser_IgnoreAndReturn(cmock_retval) getNvsEntriesFromUser_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void getNvsEntriesFromUser_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define getNvsEntriesFromUser_StopIgnore() getNvsEntriesFromUser_CMockStopIgnore()
void getNvsEntriesFromUser_CMockStopIgnore(void);
#define getNvsEntriesFromUser_Expect(nvsHandle) TEST_FAIL_MESSAGE("getNvsEntriesFromUser requires _ExpectAndReturn");
#define getNvsEntriesFromUser_ExpectAndReturn(nvsHandle, cmock_retval) getNvsEntriesFromUser_CMockExpectAndReturn(__LINE__, nvsHandle, cmock_retval)
void getNvsEntriesFromUser_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t nvsHandle, esp_err_t cmock_to_return);
#define updateNvsSettings_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("updateNvsSettings requires _Ignore (not AndReturn)");
#define updateNvsSettings_Ignore() updateNvsSettings_CMockIgnore()
void updateNvsSettings_CMockIgnore(void);
#define updateNvsSettings_StopIgnore() updateNvsSettings_CMockStopIgnore()
void updateNvsSettings_CMockStopIgnore(void);
#define updateNvsSettings_ExpectAndReturn(nvsHandle, cmock_retval) TEST_FAIL_MESSAGE("updateNvsSettings requires _Expect (not AndReturn)");
#define updateNvsSettings_Expect(nvsHandle) updateNvsSettings_CMockExpect(__LINE__, nvsHandle)
void updateNvsSettings_CMockExpect(UNITY_LINE_TYPE cmock_line, nvs_handle_t nvsHandle);
#define refreshSpeedsFromNVS_Ignore() TEST_FAIL_MESSAGE("refreshSpeedsFromNVS requires _IgnoreAndReturn");
#define refreshSpeedsFromNVS_IgnoreAndReturn(cmock_retval) refreshSpeedsFromNVS_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void refreshSpeedsFromNVS_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define refreshSpeedsFromNVS_StopIgnore() refreshSpeedsFromNVS_CMockStopIgnore()
void refreshSpeedsFromNVS_CMockStopIgnore(void);
#define refreshSpeedsFromNVS_Expect(data, dir, category) TEST_FAIL_MESSAGE("refreshSpeedsFromNVS requires _ExpectAndReturn");
#define refreshSpeedsFromNVS_ExpectAndReturn(data, dir, category, cmock_retval) refreshSpeedsFromNVS_CMockExpectAndReturn(__LINE__, data, dir, category, cmock_retval)
void refreshSpeedsFromNVS_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LEDData* data, Direction dir, SpeedCategory category, esp_err_t cmock_to_return);
#define storeSpeedsToNVS_Ignore() TEST_FAIL_MESSAGE("storeSpeedsToNVS requires _IgnoreAndReturn");
#define storeSpeedsToNVS_IgnoreAndReturn(cmock_retval) storeSpeedsToNVS_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void storeSpeedsToNVS_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define storeSpeedsToNVS_StopIgnore() storeSpeedsToNVS_CMockStopIgnore()
void storeSpeedsToNVS_CMockStopIgnore(void);
#define storeSpeedsToNVS_Expect(data, dir, category) TEST_FAIL_MESSAGE("storeSpeedsToNVS requires _ExpectAndReturn");
#define storeSpeedsToNVS_ExpectAndReturn(data, dir, category, cmock_retval) storeSpeedsToNVS_CMockExpectAndReturn(__LINE__, data, dir, category, cmock_retval)
void storeSpeedsToNVS_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, LEDData* data, Direction dir, SpeedCategory category, esp_err_t cmock_to_return);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
