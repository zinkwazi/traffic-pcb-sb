/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKOTA_H
#define _MOCKOTA_H

#include "unity.h"
#include "ota.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockota_Init(void);
void Mockota_Destroy(void);
void Mockota_Verify(void);




#define getOTATask_Ignore() TEST_FAIL_MESSAGE("getOTATask requires _IgnoreAndReturn");
#define getOTATask_IgnoreAndReturn(cmock_retval) getOTATask_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void getOTATask_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define getOTATask_StopIgnore() getOTATask_CMockStopIgnore()
void getOTATask_CMockStopIgnore(void);
#define getOTATask_Expect() TEST_FAIL_MESSAGE("getOTATask requires _ExpectAndReturn");
#define getOTATask_ExpectAndReturn(cmock_retval) getOTATask_CMockExpectAndReturn(__LINE__, cmock_retval)
void getOTATask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
typedef TaskHandle_t (* CMOCK_getOTATask_CALLBACK)(int cmock_num_calls);
void getOTATask_AddCallback(CMOCK_getOTATask_CALLBACK Callback);
void getOTATask_Stub(CMOCK_getOTATask_CALLBACK Callback);
#define getOTATask_StubWithCallback getOTATask_Stub
#define createOTATask_Ignore() TEST_FAIL_MESSAGE("createOTATask requires _IgnoreAndReturn");
#define createOTATask_IgnoreAndReturn(cmock_retval) createOTATask_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void createOTATask_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define createOTATask_StopIgnore() createOTATask_CMockStopIgnore()
void createOTATask_CMockStopIgnore(void);
#define createOTATask_Expect(handle) TEST_FAIL_MESSAGE("createOTATask requires _ExpectAndReturn");
#define createOTATask_ExpectAndReturn(handle, cmock_retval) createOTATask_CMockExpectAndReturn(__LINE__, handle, cmock_retval)
void createOTATask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t* handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_createOTATask_CALLBACK)(TaskHandle_t* handle, int cmock_num_calls);
void createOTATask_AddCallback(CMOCK_createOTATask_CALLBACK Callback);
void createOTATask_Stub(CMOCK_createOTATask_CALLBACK Callback);
#define createOTATask_StubWithCallback createOTATask_Stub
#define createOTATask_ReturnThruPtr_handle(handle) createOTATask_CMockReturnMemThruPtr_handle(__LINE__, handle, sizeof(TaskHandle_t))
#define createOTATask_ReturnArrayThruPtr_handle(handle, cmock_len) createOTATask_CMockReturnMemThruPtr_handle(__LINE__, handle, (cmock_len * sizeof(*handle)))
#define createOTATask_ReturnMemThruPtr_handle(handle, cmock_size) createOTATask_CMockReturnMemThruPtr_handle(__LINE__, handle, (cmock_size))
void createOTATask_CMockReturnMemThruPtr_handle(UNITY_LINE_TYPE cmock_line, TaskHandle_t const* handle, size_t cmock_size);
#define createOTATask_IgnoreArg_handle() createOTATask_CMockIgnoreArg_handle(__LINE__)
void createOTATask_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define queryOTAUpdateAvailable_Ignore() TEST_FAIL_MESSAGE("queryOTAUpdateAvailable requires _IgnoreAndReturn");
#define queryOTAUpdateAvailable_IgnoreAndReturn(cmock_retval) queryOTAUpdateAvailable_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void queryOTAUpdateAvailable_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define queryOTAUpdateAvailable_StopIgnore() queryOTAUpdateAvailable_CMockStopIgnore()
void queryOTAUpdateAvailable_CMockStopIgnore(void);
#define queryOTAUpdateAvailable_Expect(available, patch) TEST_FAIL_MESSAGE("queryOTAUpdateAvailable requires _ExpectAndReturn");
#define queryOTAUpdateAvailable_ExpectAndReturn(available, patch, cmock_retval) queryOTAUpdateAvailable_CMockExpectAndReturn(__LINE__, available, patch, cmock_retval)
void queryOTAUpdateAvailable_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool* available, bool* patch, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_queryOTAUpdateAvailable_CALLBACK)(bool* available, bool* patch, int cmock_num_calls);
void queryOTAUpdateAvailable_AddCallback(CMOCK_queryOTAUpdateAvailable_CALLBACK Callback);
void queryOTAUpdateAvailable_Stub(CMOCK_queryOTAUpdateAvailable_CALLBACK Callback);
#define queryOTAUpdateAvailable_StubWithCallback queryOTAUpdateAvailable_Stub
#define queryOTAUpdateAvailable_ReturnThruPtr_available(available) queryOTAUpdateAvailable_CMockReturnMemThruPtr_available(__LINE__, available, sizeof(bool))
#define queryOTAUpdateAvailable_ReturnArrayThruPtr_available(available, cmock_len) queryOTAUpdateAvailable_CMockReturnMemThruPtr_available(__LINE__, available, (cmock_len * sizeof(*available)))
#define queryOTAUpdateAvailable_ReturnMemThruPtr_available(available, cmock_size) queryOTAUpdateAvailable_CMockReturnMemThruPtr_available(__LINE__, available, (cmock_size))
void queryOTAUpdateAvailable_CMockReturnMemThruPtr_available(UNITY_LINE_TYPE cmock_line, bool const* available, size_t cmock_size);
#define queryOTAUpdateAvailable_ReturnThruPtr_patch(patch) queryOTAUpdateAvailable_CMockReturnMemThruPtr_patch(__LINE__, patch, sizeof(bool))
#define queryOTAUpdateAvailable_ReturnArrayThruPtr_patch(patch, cmock_len) queryOTAUpdateAvailable_CMockReturnMemThruPtr_patch(__LINE__, patch, (cmock_len * sizeof(*patch)))
#define queryOTAUpdateAvailable_ReturnMemThruPtr_patch(patch, cmock_size) queryOTAUpdateAvailable_CMockReturnMemThruPtr_patch(__LINE__, patch, (cmock_size))
void queryOTAUpdateAvailable_CMockReturnMemThruPtr_patch(UNITY_LINE_TYPE cmock_line, bool const* patch, size_t cmock_size);
#define queryOTAUpdateAvailable_IgnoreArg_available() queryOTAUpdateAvailable_CMockIgnoreArg_available(__LINE__)
void queryOTAUpdateAvailable_CMockIgnoreArg_available(UNITY_LINE_TYPE cmock_line);
#define queryOTAUpdateAvailable_IgnoreArg_patch() queryOTAUpdateAvailable_CMockIgnoreArg_patch(__LINE__)
void queryOTAUpdateAvailable_CMockIgnoreArg_patch(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
